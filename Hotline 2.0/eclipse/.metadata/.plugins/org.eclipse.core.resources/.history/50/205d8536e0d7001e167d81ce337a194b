package vestige.module.impl.movement;
import vestige.module.Module;
import vestige.event.Event;
import vestige.event.impl.EventMotionUpdate;
import vestige.event.impl.EventReceivePacket;
import vestige.event.impl.EventRender;
import vestige.event.impl.EventSendPacket;
import vestige.event.impl.MovementEvent;
import vestige.mapper.ThePlayer;
import vestige.module.Category;
import vestige.setting.impl.ModeSetting;
import vestige.setting.impl.NumberSetting;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.lwjgl.input.Keyboard;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import cr.launcher.BlockPos;
import cr.launcher.Config;
import cr.launcher.Config;
import cr.launcher.eb;
import cr.launcher.main.a;
public class Fly extends Module {
	private ModeSetting mode = new ModeSetting("Mode", "Vanilla", "Vanilla", "Hypixel", "Hypixel dmg", "Redesky", "Verus", "Minemora", "MMC", "Hycraft");
	
	private ModeSetting vanillaMode = new ModeSetting("Vanilla Mode", "Motion", "Motion", "Creative");
	private NumberSetting vanillaSpeed = new NumberSetting("Vanilla Speed", 1, 0.2, 9, 0.2, this);
	private NumberSetting vanillaVerticalSpeed = new NumberSetting("Vanilla Vertical Speed", 1, 0.2, 9, 0.2, this);
	
	private NumberSetting timer = new NumberSetting("Timer", 1, 0.1, 4, 0.1, this);
	
	private NumberSetting hypixelPhaseMotion = new NumberSetting("Hypixel Phase Motion", -0.2, -0.5, -0.02, 0.02, this);
	
	private ModeSetting verusMode = new ModeSetting("Verus mode", "Latest", "Latest", "Latest dmg");
	private NumberSetting verusSpeed = new NumberSetting("Verus speed", 2, 0.5, 9, 0.5, this);
	private com.craftrise.gg niga;
	private BlockPos originalPos;
	private double x, y, z;
	
	private ArrayList<BlockPos> blocks = new ArrayList<>();
	
	private double speed;
	private int counter, ticks;
	private boolean lagbacked;
	private boolean started;
	public Fly() {
		super("Fly", Category.MOVEMENT);
		this.addSettings(mode, vanillaMode, vanillaSpeed, vanillaVerticalSpeed, verusMode, verusSpeed, timer, hypixelPhaseMotion);
	}
    
    public static void hypixelDamage() {
        for(int i = 0; i < 50; i++) {
            PacketUtils.sendPacketNoEvent(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.0625, mc.thePlayer.posZ, false));
            PacketUtils.sendPacketNoEvent(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false));
        }
        //PacketUtils.sendPacketNoEvent(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
        PacketUtils.sendPacketNoEvent(new C03PacketPlayer(true));
    }
	public void onEnable() {
		originalPos = new BlockPos(x = ThePlayer.GetPosX(), y = ThePlayer.GetPosY(), z = ThePlayer.GetPosZ());
		ticks = counter = 0;
		lagbacked = false;
		
		started = false;
		if(mode.is("Hypixel dmg")) {
			DamageUtil.hypixelDamage();
			ThePlayer.jump();
			speed = move.getBaseMoveSpeed() + 0.1;
			ticks = 1;
		} else if(mode.is("Minemora")) {
			ThePlayer.jump();
			ThePlayer.Strafe(0);
		} else if(mode.is("Verus latest")) {
			if(verusMode.is("Verus")) {
				speed = move.getBaseMoveSpeed();
			} else if(verusMode.is("Latest dmg")) {
				speed = verusSpeed.getValue();
			}
		}
	}
    public static void setSpeed(double moveSpeed) {
        setSpeed(moveSpeed, a.q.bL, a.q.l.c.a(5L), a.q.l.b.a(5L));
    }
	public void onDisable() {
		if(mode.is("Vanilla")) {
			ThePlayer.SetMotionX(0.1);
			ThePlayer.SetMotionY(0.1);
			ThePlayer.SetMotionZ(0.1);
		}
		if(mode.is("Hypixel")) {
			EventSendPacket.EventSendPacket(new C09PacketHeldItemChange());
		}
		
		if(mode.is("Hypixel dmg")) {
			setSpeed(Math.min(speed, move.getBaseMoveSpeed()));
		}
		
		if(mode.is("Minemora")) {
			ThePlayer.Strafe(0);
			PacketUtils.sendPacketNoEvent(new C04PacketPlayerPosition(ThePlayer.GetPosX() , ThePlayer.GetPosY(), ThePlayer.GetPosZ(), true));
			PacketUtils.sendPacketNoEvent(new C0BPacketEntityAction(mc.thePlayer, Action.STOP_SPRINTING));
		}
		
		if(mode.is("Blocksmc")) {

		}
		
		if(mode.is("MMC")) {
			ThePlayer.SetMotionX(0);
			ThePlayer.SetMotionZ(0);
			ThePlayer.SetMotionY(0);
		}
		
		if(mode.is("Hycraft")) {
			ThePlayer.Strafe(0);
			ThePlayer.SetMotionY(0);
		}
		
		if(!blocks.isEmpty()) {
			for(BlockPos pos : blocks) {
				//mc.theWorld.setBlockToAir(pos);	
			}
			blocks.clear();
		}
	}
	public void onEvent(Event e) {
		if(e instanceof EventRender) {
			vanillaMode.setShowed(mode.is("Vanilla"));
			vanillaSpeed.setShowed(mode.is("Vanilla") && vanillaMode.is("Motion"));
			vanillaVerticalSpeed.setShowed(mode.is("Vanilla") && vanillaMode.is("Motion"));
			timer.setShowed(mode.is("Hypixel"));
			hypixelPhaseMotion.setShowed(mode.is("Hypixel"));
			verusMode.setShowed(mode.is("Verus"));
			verusSpeed.setShowed(mode.is("Verus") && verusMode.is("Latest dmg"));
			
		}
		
		if(!isEnabled()) {
			return;
		}
		
		switch(mode.getMode()) {
		case "Vanilla":
			Vanilla(e);
			break;
		case "Hypixel":
			Hypixel(e);
			break;
		case "Hypixel dmg":
			HypixelDmg(e);
			break;
		case "Verus":
			Verus(e);
			break;
		case "Blocksmc":
			BlocksMC(e);
			break;
		case "Redesky":
			Redesky(e);
			break;
		case "Minemora":
			Minemora(e);
			break;
		case "MMC":
			MMC(e);
			break;
		case "Hycraft":
			Hycraft(e);
			break;
		}
	}
    public static void SetisFlying(boolean value) {
        try {
            Class<?> thePlayerClass = com.craftrise.mg.class;
            Field sField = thePlayerClass.getDeclaredField("S");
            sField.setAccessible(true);
            Object sObject = sField.get(a.q);
            Field hField = sObject.getClass().getDeclaredField("h");
            hField.setAccessible(true);
            hField.set(sObject, new eb(value, cr.launcher.main.a.m));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	private void Vanilla(Event e) {
		if(e instanceof MovementEvent) {

			MovementEvent event = (MovementEvent) e;
			if(vanillaMode.is("Motion")) {
				ThePlayer.Strafe(vanillaSpeed.getValue());;
				
				if(mc.gameSettings.keyBindJump.isKeyDown()) {
					event.setMotionY(vanillaVerticalSpeed.getValue());
				} else if(Config.gameSettings) {
					event.setMotionY(-vanillaVerticalSpeed.getValue());
				} else {
					event.setMotionY(0);
				}
				ThePlayer.SetMotionY(0);
			} else if(vanillaMode.is("Creative")) {
				SetisFlying(true);
			}
		}
	}
	private void Hypixel(Event event) {
		/*
		if(!lagbacked && mc.thePlayer.motionY < 0 && !mc.thePlayer.onGround) {
			//mc.thePlayer.noClip = true;
		} else {
			//mc.thePlayer.noClip = false;
		}
		
		if(event instanceof EventUpdate) {
			Vestige.getPacketsProcessor().setBlinking(false);
			if(lagbacked) {
				mc.thePlayer.onGround = true;
				if(ticks < 40) {
					mc.timer.timerSpeed = (float) timer.getValue();
				} else {
					mc.timer.timerSpeed = 0.6F;
				}
				
				//Vestige.getPacketsProcessor().setBlinking(ticks > 5 && ticks % 4 != 0);
			} else {
				mc.timer.timerSpeed = 1F;
			}
			
			ticks++;
		} else if(event instanceof MovementEvent) {
			MovementEvent e = (MovementEvent) event;
			if(lagbacked) {
				e.setMotionY(mc.thePlayer.motionY = 0);
				//move.setSpeed(move.getBaseMoveSpeed() * 0.6);
			} else {
				if(mc.thePlayer.onGround) {
					e.setMotionY(0.41999998688698);
					mc.thePlayer.motionY = 0.42;
				} else if(e.getMotionY() < -0 && e.getMotionY() > -0.1) {
					boolean foundSlot = false;
					int itemSpoofed = 0;
					
					for(int i = 0; i < 9; i++) {
						if (mc.thePlayer.inventory.getStackInSlot(i) == null)
							continue;
						if (mc.thePlayer.inventory.getStackInSlot(i).getItem() instanceof ItemBlock && !ScaffoldUtils.blockBlacklist.contains(((ItemBlock) mc.thePlayer.inventory.getStackInSlot(i).getItem()).getBlock())) {
							itemSpoofed = i;
							foundSlot = true;
							break;
						}
					}
					if(foundSlot) {
						BlockPos pos = new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 2, mc.thePlayer.posZ);
						PacketUtils.sendPacketNoEvent(new C09PacketHeldItemChange(itemSpoofed));
						PacketUtils.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(pos, EnumFacing.UP.getIndex(), mc.thePlayer.inventory.getStackInSlot(itemSpoofed), 0, 1, 0));
						mc.thePlayer.swingItem();
						//e.setMotionY(hypixelPhaseMotion.getValue());
					} else {
						this.setEnabled(false);
						Vestige.addChatMessage("You need blocks in your hotbar to fly !");
						return;
					}
				}
				move.setSpeed(0);
			}
		} else if(event instanceof EventMotionUpdate) {
			EventMotionUpdate e = (EventMotionUpdate) event;
			if(!lagbacked && mc.thePlayer.motionY >= -0.1) {
				e.setPitch(90);
			} else if(lagbacked) {
				//e.setPitch(90);
				e.setOnGround(true);
			}
		} else if(event instanceof EventReceivePacket) {
			EventReceivePacket e = (EventReceivePacket) event;
			if(e.getPacket() instanceof S08PacketPlayerPosLook) {
				lagbacked = true;
			} else if(e.getPacket() instanceof S21PacketChunkData || e.getPacket() instanceof S22PacketMultiBlockChange || e.getPacket() instanceof S23PacketBlockChange || e.getPacket() instanceof S24PacketBlockAction) {
				if(!lagbacked) {
					e.setCancelled(true);
				}
			}
		}
		*/
		if(event instanceof EventUpdate) {
			if(lagbacked) {
				//mc.thePlayer.onGround = true;
			}
			mc.timer.timerSpeed = 1F;
		} else if(event instanceof MovementEvent) {
			MovementEvent e = (MovementEvent) event;
			if(lagbacked) {
				e.setMotionY(ThePlayer.SetMotionY(0));
			} else {
				move.setSpeed(0);
				if(mc.thePlayer.onGround && ticks == 0) {
					e.setMotionY(ThePlayer.SetMotionY(0.0625));
					//mc.theWorld.setBlockToAir(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ));
				}
			}
		} else if(event instanceof EventMotionUpdate) {
			EventMotionUpdate e = (EventMotionUpdate) event;
			if(ticks > 1 && ticks < 6) {
				e.setY(originalPos.getY() - 0.08);
			}
			ticks++;
		} else if(event instanceof EventReceivePacket) {
			EventReceivePacket e = (EventReceivePacket) event;
			if(e.getPacket() instanceof S08PacketPlayerPosLook) {
				lagbacked = true;
			}
		}
	}
}
